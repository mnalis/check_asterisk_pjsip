#!/usr/bin/perl -T
# GPLv3+ by Matija Nalis <mnalis-perl@axe.tomsoft.hr> started 2023-01-27
# checks specific Asterisk / Freepbx PJSIP registrations / endpoints
#
# FIXME: define "main::HELP_MESSAGE()" and/or "main::VERSION_MESSAGE()" for nicer help texts


use warnings;
use strict;
use Getopt::Long qw(:config auto_version);

our $VERSION = '1.00';
%ENV = ( PATH => '/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin' );
my $ASTERISK = "/usr/sbin/asterisk";

# no user configurable parts below
my $VALID_NAME_REGEX='[a-zA-Z0-9_\-]+';
my $DEBUG = 0;

my %NAGIOS = (
    STATE_OK => 0,
    STATE_WARNING => 1,
    STATE_CRITICAL => 2,
    STATE_UNKNOWN => 3,
);

my $ret_value = $NAGIOS{'STATE_UNKNOWN'};

# --help
sub print_help() {
    print STDERR <<EOF;
check_asterisk_pjsip $VERSION

Usage: check_asterisk_pjsip [OPTION]...

Options:
  --registration|-r REG1[,REG2]...\t- check registrations
  --endpoint|-e END1[,END2]...\t\t- check endpoints
  --debug|-d 1\t\t\t\t- enable debug
  --help|-h\t\t\t\t- this help
  
Example: check_asterisk_pjsip -r HT1 -r HT2 --endpoint TSMTS
EOF

    exit $NAGIOS{'STATE_UNKNOWN'};
}


# cmd_exec - executes a given command and return its output
sub cmd_exec($) {
    my ($cmd) = @_;
    $DEBUG > 1 && print STDERR "Executing $ASTERISK $cmd";
    
    open(my $fh, "-|", $ASTERISK, "-x", $cmd) || die "Can't exec: '$ASTERISK -x $cmd': $! ($?)";
    
    my $ret = '';
    while (<$fh>) {
        $ret .= $_;
    }
    return $ret;
}

### MAIN ###

my $did_something = 0;
my @REGISTRATIONS = ();
my @ENDPOINTS = ();

GetOptions (
    'registration=s' => \@REGISTRATIONS,
    'endpoint=s' => \@ENDPOINTS,
    'debug=i' => \$DEBUG,
    'help' => sub { print_help() }
    );

if ($DEBUG =~ /^(\d+)$/) { $DEBUG = $1 } else { die "invalid param -d $DEBUG" }

# --registration
sub parse_reg($) {
    my ($reg) = @_;
    
    print STDERR "Output: " . cmd_exec('pjsip show registrations');
    die "FIXME WIP"
}
foreach my $reg (@REGISTRATIONS) {
    if ($reg =~ /^(${VALID_NAME_REGEX})$/) { $reg = $1 } else { die "Invalid name in $reg" }
    $DEBUG && print "check registration for: $reg\n";
    parse_reg($reg);
    $did_something++;
}

# --endpoint
sub parse_endp($) {
    my ($endp) = @_;
    die "FIXME WIP"
}
foreach my $endp (@ENDPOINTS) {
    if ($endp =~ /^(${VALID_NAME_REGEX})$/) { $endp = $1 } else { die "Invalid name in $endp" }
    $DEBUG && print "check endpoint for: $endp\n";
    parse_endp($endp);
    $did_something++;
}


unless ($did_something) {  # if help requested, or missing required params, show help page
    print_help();
    exit $NAGIOS{'STATE_UNKNOWN'};
}

exit $ret_value;
